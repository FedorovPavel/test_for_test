//  Объявление функций
//  Объявление функции first по типу Function Declaration
function first(arg2) {
}

//  Объявление функции second по типу Function Expression 
const second = function (arg1) {
}
//  Объявление функции third по типу "стрелочная функция"
const third = (arg3) => {
}

//  Вызов функции
//  Когда пишут имя функции с круглыми скобочками сразу после имени, то это 
//  называют "Вызвать функцию"
first();        //  Вызов функции first

//  Когда функция вызывается с аргументами, то говорят 
//  "Вызвать функцию с аргументами", а по отношению к аргументам говорят
//  "при вызове функции n-ый аргумент принимает значение %значение/переменная%" или
//  "При вызове функции n-ый аргумент установлен" - т.е. в качестве аргумента передано какое-либо значение 
//  Пример

first(1);   //  Вызов функции first с первым аргументом равным 1

let b = 4;
second(b);  //  Вызов функции second. При вызове функции 1-ый аргумент принимает значение переменной b

third();    //  Вызов функции third без аргументов.


//  Любая функция может быть вызвана с аргументами или без.
//  Для некоторых функций аргументы являются критичными - т.е. без аргументов, корректный результат не может
//  быть достигнут
//  Для некоторых функций аргументы могут не являться критичными (опциональными) - т.е.
//  наличие или отсутствие этого аргумента влияет на достижение результата, но в обоих случая
//  функция будет выполнена корректна
//  Пример

//  Здесь a - является критичным аргументом (если его не установить будет ошибка)
//  b - является некритичным аргументом (опциональным) (если его не установить, то он будет равен 5)
function sum(a, b) {
    if (!b)
        b = 5;
    
    if (!a)
        throw new Error('Не установлен первый аргумент')
    
    return a + b;
}

sum(1);     //  6
sum();      //  Ошибка
sum(5,9)    //  14

//  Аргументы в функциях
//  Аргументы указанные при объявлении могут дублировать имена переменных в основной функции(файле)
//  Однако, имена не связывают переменную и ее аргумент.
//  Связь устанавливается на этапе "вызова функции" с помощью передачи аргументов по очередности
//  Т.е.  первое значение при вызове функции будет установлено первому аргументу, второе значение, второму аргументу
//  Пример
sum(7,9);   //  аргументу a функции sum будет присвоено значение 7
            //  аргументу b функции sum будет присвоено значение 9
        
sum(b,1);   //  аргументу a функции sum будет присвоено значение переменной b (4)
            //  аргументу b функции sum будет присвоено значение 1

//  Говорят что "функция возвращает значение", когда внутри функции указан return 
//  Если в функции нет return, то говорят "функция ничего не возвращает" 
//  "Возвращаемое значние" может быть присвоено переменной
//  Если функция из библиотеки или сторонняя, то VS code подскажет возвращает ли какое-либо значение функция
//  Если VS code не подсказывает, то гугли эту функцию в интернете

//  Пример
let newValue = sum(10, 15);
//  Функция sum возвращает значение. Это значение присваивается в переменную newValue;


//  Локальные и глобальные переменные(Области видимости)
//  Глобальными переменными называются переменные доступные в любом месте этого файла
let globalVar = 2;  //  глобальная переменная
//  Данная переменная называется глобальной, потому что может быть использована в любом месте файла

if (true) {
    let localVariable;   //  Локальная переменная
    //  Называется так, потому что существует только внутри блока объявления переменной
    if (true){
        localVariable = 5;      //  Все хорошо
    }

    localVariable = 4; //  Все хорошо
}

localVariable = 3;      //  Ошибка, данная переменая за пределами блока объявления

/**
 * Задания
 */

/**
 * №1 Выполните действия описанные ниже
 * 
 * 1) Объявите функцию sub.
 * 2) Данная функция должна принимать 2 аргумента (a и b)
 * Оба аргумента должны быть опциональными. Если значение не установлено то они должны принимать значение равное 0
 * 3) Данная функция должна возвращать в качестве результата разницу между a и b
 * 4) Вызовете функцию sub с аргументами 5 и 4 соответственно, в качестве результата должен быть 1
 * 5) Вызовете функцию sub с аргументами 4 и 5 соответственно, в качестве результата должен быть -1
 */

/**
 * №2 Опишите функцию
 * как выше
 */

function mul(a, b) {
    if (!a) {
        a = 1;
    }

    if (!b) {
        throw new Error('второй аргумент не установлен')
    }

    return a * b;
}

/**
 * № 3 Опишите функцию как в задании 1
 * Что делает эта функция - опишите своими словами
 */

function printHello(firstName, lastName, midName) {
    let message = '';
    if (typeof(firstName) == 'string')
        message = firstName.slice(0, 1).toUpperCase() + firstName.slice(1).toLowerCase();
    
    if (typeof(lastName) == 'string') 
        message = lastName.slice(0, 1).toUpperCase() + lastName.slice(1).toLowerCase() + ' ' + message;

    if (typeof(midName) == 'string')
        message = message + ' ' + midName.slice(0,1).toUpperCase() + midName.slice(1).toLowerCase();

    console.log(message);
}

/**
 * № 4 Напишите номера строк в которых существуют следующие переменные.
 * Пример указан для переменный d
 * 
 * 1) acc [ | ]
 * 2) res [ | ]
 * 3) a [ | ]
 * 4) b [ | ]
 * 5) c [ | ]
 * 6) d [ 169 | 169 ]
 */
let acc;


function test(a) {
    let res;
    if (a) {
        res = 5;
        let b;
    } else {
        let c = 4;
        if (a + 10 == c) {
            c = c + a;
            let d;
        }
        res = c;
    }
    return res;
}